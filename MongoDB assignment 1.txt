1.Movies Collection

1.1 Find Documents
===================

i)db.movies.find().pretty();

ii)db.movies.find({ writer: 'Quentin Tarantino' }).pretty();

iii)db.movies.find({ actors: 'Brad Pitt' }).pretty();

iv)db.movies.find({ franchise: 'The Hobbit' }).pretty();

v)db.movies.find({ year: { $gte: 1990, $lte: 1999 } }).pretty();

vi)db.movies.find({ $or: [{ year: { $lt: 2000 } }, { year: { $gt: 2010 } }] }).pretty();

1.2 Update Documents
=====================

i)db.movies.update({ title: 'The Hobbit: An Unexpected Journey' }, { $set: { synopsis: "A reluctant hobbit, Bilbo Baggins, sets out to the Lonely Mountain with a spirited group of dwarves to reclaim their mountain home - and the gold within it - from the dragon Smaug." } });

ii)db.movies.update({ title: 'The Hobbit: The Desolation of Smaug' }, { $set: { synopsis: "The dwarves, along with Bilbo Baggins and Gandalf the Grey, continue their quest to reclaim Erebor, their homeland, from Smaug. Bilbo Baggins is in possession of a mysterious and magical ring." } });

iii)db.movies.update({ title: 'Pulp Fiction' }, { $push: { actors: 'Samuel L. Jackson' } });

1.3 Text Search
================

i)db.movies.find({ synopsis: /Bilbo/g }).pretty();

ii)db.movies.find({ synopsis: /Gandalf/g }).pretty();

iii)db.movies.find({ $and: [{ synopsis: /Bilbo/g }, { synopsis: { $not: /Gandalf/g } }] }).pretty();

iv)db.movies.find({ synopsis: /(dwarves|hobbit)/g }).pretty();

v)db.movies.find({ $and: [{ synopsis: /gold/g }, { synopsis: /dragon/g }] }).pretty();

1.3 Delete Documents
=====================

i)db.movies.deleteMany({ title: "Pee Wee Herman's Big Adventure" });

ii)db.movies.deleteMany({ title: "Avatar" });


2.Users Collection
===================

i)db.users.find().pretty();

ii)db.posts.find().pretty();

iii)db.posts.find({ username: 'GoodGuyGreg' }).pretty();

iv)db.posts.find({ username: 'ScumbagSteve' }).pretty();

v)db.comments.find().pretty();

vi)db.comments.find({ username: 'GoodGuyGreg' }).pretty();

vii)db.comments.find({ username: 'ScumbagSteve' }).pretty();

viii)db.posts.aggregate([{$match: { title: 'Reports a bug in your code' }},{$lookup: {from: 'comments',localField: '_id',foreignField: 'post',as: 'comments'}}]).pretty();


